openapi: 3.0.3

info:
  title: MicroCourse API
  version: 1.0.0
  description: >
    API for MicroCourse LMS. Cookie- or Bearer-based auth + CSRF for unsafe requests.
  license:
    name: MIT
    url: https://opensource.org/license/mit/

servers:
  - url: /api
    description: Base API
  - url: /api/v1
    description: Versioned API

tags:
  - name: auth
    description: Authentication endpoints

security:
  - cookieAuth: []
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: mc_token
      description: Access JWT stored as cookie.
    refreshCookieAuth:
      type: apiKey
      in: cookie
      name: mc_refresh
      description: Refresh JWT stored as cookie.

  schemas:
    AuthSignupRequest:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string, minLength: 1, example: Jane Doe }
        email: { type: string, format: email, example: jane@example.com }
        password: { type: string, minLength: 8, example: secret123 }
    AuthLoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: jane@example.com }
        password: { type: string, minLength: 8, example: secret123 }
    PublicUser:
      type: object
      properties:
        _id: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        role: { type: string, example: student }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    AuthResponse:
      type: object
      required: [success, user]
      properties:
        success: { type: boolean, example: true }
        user: { $ref: '#/components/schemas/PublicUser' }
        token:
          type: string
          nullable: true
          description: Legacy alias of accessToken (if provided).
        accessToken:
          type: string
          description: JWT access token (may also be set as cookie).
    ErrorResponse:
      type: object
      required: [success, message]
      properties:
        success: { type: boolean, example: false }
        message: { type: string, example: "Bad request" }
        requestId: { type: string, example: "a1b2c3..." }

paths:

  /auth/csrf:
    get:
      tags: [auth]
      summary: Get CSRF token + cookie
      operationId: getCsrf
      security: []    # public
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrfToken: { type: string }

  /auth/signup:
    post:
      tags: [auth]
      summary: Sign up
      operationId: authSignup
      security: []    # public (but CSRF-protected)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthSignupRequest' }
      responses:
        "201":
          description: Created (cookies may be set)
          headers:
            Set-Cookie:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        "400":
          description: Invalid payload
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        "409":
          description: Email already in use
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/login:
    post:
      tags: [auth]
      summary: Login
      operationId: authLogin
      security: []    # public (but CSRF-protected)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthLoginRequest' }
      responses:
        "200":
          description: OK (cookies may be set)
          headers:
            Set-Cookie:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        "400":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/refresh:
    post:
      tags: [auth]
      summary: Rotate refresh and issue new access token
      operationId: authRefresh
      description: >
        Requires a valid CSRF header and the **mc_refresh** cookie.
        Responds with a fresh access token and sets both cookies again.
      security:
        - refreshCookieAuth: []
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              schema: { type: string }
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  accessToken: { type: string }
        "401":
          description: Invalid or missing refresh token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/logout-everywhere:
    post:
      tags: [auth]
      summary: Revoke all sessions and clear cookies
      operationId: authLogoutEverywhere
      description: >
        Requires auth (cookie/bearer) and CSRF header. Revokes **all** refresh sessions for the user.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/me:
    get:
      tags: [auth]
      summary: Current user
      operationId: authMe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [success, user]
                properties:
                  success: { type: boolean, example: true }
                  user: { $ref: '#/components/schemas/PublicUser' }
        "401":
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
