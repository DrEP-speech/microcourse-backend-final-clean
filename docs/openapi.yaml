openapi: 3.0.3

info:
  title: MicroCourse API
  version: 1.0.0
  description: API for MicroCourse. Supports cookie-based and Bearer JWT auth.
  license:
    name: MIT
    url: https://opensource.org/license/mit/

servers:
  - url: /api
    description: Base API
  - url: /api/v1
    description: Versioned API

tags:
  - name: auth
    description: Authentication endpoints

# Global auth: allow EITHER cookie OR bearer
security:
  - cookieAuth: []
  - bearerAuth: []

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: mc_token
      description: Auth cookie issued by the server.
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token (access token).

  schemas:
    AuthSignupRequest:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string, minLength: 1, example: Jane Doe }
        email: { type: string, format: email, example: jane@example.com }
        password: { type: string, minLength: 8, example: secret123 }

    AuthLoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: jane@example.com }
        password: { type: string, minLength: 8, example: secret123 }

    PublicUser:
      type: object
      properties:
        _id: { type: string, example: "66c8f5c2e2d45b0d5e3d1f90" }
        email: { type: string, format: email }
        name: { type: string }
        role: { type: string, example: user }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    AuthResponse:
      type: object
      required: [success, user]
      properties:
        success: { type: boolean, example: true }
        user: { $ref: '#/components/schemas/PublicUser' }
        token:
          type: string
          nullable: true
          description: Legacy token field (same as accessToken for backward compatibility).
        accessToken:
          type: string
          description: Bearer access token (JWT).
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    ErrorResponse:
      type: object
      required: [success, message]
      properties:
        success: { type: boolean, example: false }
        message: { type: string, example: "Bad request" }
        requestId: { type: string, example: "a1b2c3…" }

paths:
  /auth/csrf:
    get:
      tags: [auth]
      summary: Get CSRF token
      operationId: getCsrf
      description: Issues a CSRF cookie and returns the token to send in the **X-CSRF-Token** header.
      security: []   # public
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrfToken: { type: string }
                required: [csrfToken]
              examples:
                ok:
                  value: { csrfToken: "abc123" }
        "400":
          description: CSRF not enabled or request invalid
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/signup:
    post:
      tags: [auth]
      summary: Sign up
      operationId: authSignup
      security: []   # public (overrides global)
      parameters:
        - in: header
          name: X-CSRF-Token
          description: CSRF token obtained from **GET /auth/csrf**
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthSignupRequest' }
            examples:
              body:
                value: { name: "Jane Doe", email: "jane@example.com", password: "secret123" }
      responses:
        "201":
          description: Created
          headers:
            Set-Cookie:
              description: May set authentication cookies (e.g., **mc_token**).
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        "400": { description: Invalid payload }
        "409": { description: Email already in use }

  /auth/login:
    post:
      tags: [auth]
      summary: Login
      operationId: authLogin
      security: []   # public (overrides global)
      parameters:
        - in: header
          name: X-CSRF-Token
          description: CSRF token obtained from **GET /auth/csrf**
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthLoginRequest' }
            examples:
              body:
                value: { email: "jane@example.com", password: "secret123" }
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: May set authentication cookies (e.g., **mc_token**).
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        "400": { description: Invalid credentials / payload }
        "401": { description: Unauthorized }

  /auth/me:
    get:
      tags: [auth]
      summary: Current user
      operationId: authMe
      description: Returns the authenticated user. Accepts either **Bearer** token or **mc_token** cookie.
      # (optional — global security already applies; keep for clarity)
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  user: { $ref: '#/components/schemas/PublicUser' }
        "401": { description: Not authenticated }
