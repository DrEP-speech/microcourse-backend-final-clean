openapi: 3.0.3
info:
  title: MicroCourse API
  version: 1.0.0
servers:
  - url: /api
paths:
  /health:
    get:
      summary: API health
      responses: { '200': { description: OK } }
  /auth/signup:
    post:
      summary: Signup
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Signup' } } } }
      responses: { '201': { description: Created }, '400': { description: Bad request } }
  /auth/login:
    post:
      summary: Login
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Login' } } } }
      responses: { '200': { description: OK } }
  /auth/me:
    get:
      summary: Current user
      security: [{ bearerAuth: [] }]
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /courses:
    get:
      summary: List courses
      parameters:
        - in: query; name: page; schema: { type: integer, minimum: 1 }
        - in: query; name: limit; schema: { type: integer, minimum: 1, maximum: 50 }
        - in: query; name: q; schema: { type: string }
        - in: query; name: sort; schema: { type: string, example: createdAt:desc,title:asc }
      responses: { '200': { description: OK } }
    post:
      summary: Create course
      security: [{ bearerAuth: [] }]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/CourseCreate' } } } }
      responses: { '201': { description: Created }, '400': { description: Bad request }, '401': { description: Unauthorized } }
  /courses/bulk:
    post:
      summary: Bulk create courses
      security: [{ bearerAuth: [] }]
      requestBody: { required: true, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/CourseCreate' } } } } }
      responses: { '201': { description: Created }, '400': { description: Bad request }, '401': { description: Unauthorized } }
  /courses/{id}:
    get:
      summary: Read course
      parameters: [ { in: path, name: id, required: true, schema: { type: string } } ]
      responses: { '200': { description: OK }, '404': { description: Not found } }
    patch:
      summary: Update course
      security: [{ bearerAuth: [] }]
      parameters: [ { in: path, name: id, required: true, schema: { type: string } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/CourseUpdate' } } } }
      responses: { '200': { description: OK }, '401': { description: Unauthorized }, '403': { description: Forbidden } }
    delete:
      summary: Soft delete course (cascade quizzes)
      security: [{ bearerAuth: [] }]
      parameters: [ { in: path, name: id, required: true, schema: { type: string } } ]
      responses: { '200': { description: OK }, '401': { description: Unauthorized }, '403': { description: Forbidden } }
  /courses/{id}/quizzes:
    get:
      summary: Quizzes for a course (owner sees drafts)
      parameters:
        - in: path; name: id; required: true; schema: { type: string }
        - in: query; name: page; schema: { type: integer, minimum: 1 }
        - in: query; name: limit; schema: { type: integer, minimum: 1, maximum: 50 }
        - in: query; name: q; schema: { type: string }
        - in: query; name: sort; schema: { type: string }
      responses: { '200': { description: OK }, '404': { description: Not found } }
  /quizzes:
    get:
      summary: List quizzes
      parameters:
        - in: query; name: course; schema: { type: string }
        - in: query; name: page; schema: { type: integer, minimum: 1 }
        - in: query; name: limit; schema: { type: integer, minimum: 1, maximum: 50 }
        - in: query; name: q; schema: { type: string }
        - in: query; name: sort; schema: { type: string }
      responses: { '200': { description: OK } }
    post:
      summary: Create quiz
      security: [{ bearerAuth: [] }]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/QuizCreate' } } } }
      responses: { '201': { description: Created }, '401': { description: Unauthorized } }
  /quizzes/bulk:
    post:
      summary: Bulk create quizzes
      security: [{ bearerAuth: [] }]
      requestBody: { required: true, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/QuizCreate' } } } } }
      responses: { '201': { description: Created }, '401': { description: Unauthorized } }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Signup:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
        name: { type: string }
    Login:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
    CourseCreate:
      type: object
      required: [title]
      properties:
        title: { type: string }
        description: { type: string }
        published: { type: boolean }
    CourseUpdate:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        published: { type: boolean }
    QuizCreate:
      type: object
      required: [title, course]
      properties:
        title: { type: string }
        description: { type: string }
        course: { type: string }
        published: { type: boolean }
        questions:
          type: array
          items:
            type: object
            required: [text, choices]
            properties:
              text: { type: string }
              choices: { type: array, items: { type: string }, minItems: 2 }
              correctIndex: { type: integer }
