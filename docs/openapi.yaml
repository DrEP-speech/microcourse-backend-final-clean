openapi: 3.0.3
info:
  title: MicroCourse API
  version: 1.0.0
  description: >
    API for MicroCourse. Supports cookie-based and Bearer JWT auth.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: /api
    description: Base API
  - url: /api/v1
    description: Versioned API

tags:
  - name: auth
    description: Authentication endpoints

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Send the token as: Authorization: Bearer <token>"
    cookieAuth:
      type: apiKey
      in: cookie
      name: mc_token
      description: "Auth cookie set by the server after login/signup."

  schemas:
    AuthSignupRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          example: Jane Doe
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 6
          example: secret123
    AuthLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: secret123
    PublicUser:
      type: object
      properties:
        _id:
          type: string
          example: 64fb2d1f9a32b3a9c5f0d111
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: Jane Doe
        role:
          type: string
          example: student
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/PublicUser'
        token:
          type: string
          description: "Legacy field: mirrors accessToken"
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

security:
  - cookieAuth: []
  - bearerAuth: []

paths:
  /auth/signup:
    post:
      operationId: authSignup
      summary: Sign up
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthSignupRequest'
      responses:
        '201':
          description: "Created. Sets mc_token cookie and returns user + tokens."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: "Invalid payload or email already in use."
  /auth/login:
    post:
      operationId: authLogin
      summary: Login
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: "OK. Sets mc_token cookie and returns user + tokens."
          headers:
            Set-Cookie:
              schema:
                type: string
              description: "Includes mc_token with SameSite=None; Secure in prod."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: "Invalid credentials."
      x-rateLimit:
        windowMs: 600000
        max: 10
  /auth/me:
    get:
      operationId: authMe
      summary: Current user
      tags: [auth]
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: "Returns the authenticated user."
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/PublicUser'
        '401':
          description: "Not authenticated."
