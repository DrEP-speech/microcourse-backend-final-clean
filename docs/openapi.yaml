openapi: 3.0.3

info:
  title: MicroCourse API
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: /api
    description: Base API
  - url: /api/v1
    description: Versioned API

tags:
  - name: auth
    description: Authentication & session lifecycle
  - name: system
    description: Health and service info

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: mc_token
    refreshCookieAuth:
      type: apiKey
      in: cookie
      name: mc_refresh
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    CsrfTokenHeader:
      name: X-CSRF-Token
      in: header
      required: true
      schema:
        type: string
      description: CSRF token obtained from GET /auth/csrf.

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    AuthUser:
      type: object
      required: [ _id, email, name, role, createdAt, updatedAt ]
      properties:
        _id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          example: student
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      required: [ success, message ]
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
              message:
                type: string

    SignupRequest:
      type: object
      additionalProperties: false
      required: [ name, email, password ]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 72
        inviteCode:
          type: string
        captchaToken:
          type: string
        rememberMe:
          type: boolean
        locale:
          type: string
        timezone:
          type: string
        termsAccepted:
          type: boolean

    SignupResponse:
      type: object
      required: [ success, user ]
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/AuthUser'

    LoginRequest:
      type: object
      additionalProperties: false
      required: [ password ]
      properties:
        email:
          type: string
          format: email
        identifier:
          type: string
          description: Optional username or email
        password:
          type: string
          minLength: 8
          maxLength: 72
        rememberMe:
          type: boolean
        captchaToken:
          type: string

    LoginResponse:
      type: object
      required: [ success, user ]
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/AuthUser'

    MeResponse:
      type: object
      required: [ success, user ]
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/AuthUser'

    RefreshResponse:
      type: object
      required: [ success ]
      properties:
        success:
          type: boolean
          example: true
        accessToken:
          type: string
          description: Optional if you also set the cookie. Cookie is the source of truth.

paths:
  /healthz:
    get:
      tags: [system]
      summary: Liveness probe
      operationId: systemHealthz
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
        "503":
          $ref: '#/components/responses/ServiceUnavailable'

  /auth/csrf:
    get:
      tags: [auth]
      summary: Issue CSRF token and cookie
      operationId: authGetCsrf
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrfToken:
                    type: string
        "429":
          $ref: '#/components/responses/TooManyRequests'

  /auth/signup:
    post:
      tags: [auth]
      summary: Sign up
      operationId: authSignup
      security: []
      parameters:
        - $ref: '#/components/parameters/CsrfTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        "201":
          description: Created (sets mc_token & mc_refresh cookies)
          headers:
            Set-Cookie:
              schema:
                type: string
              description: httpOnly cookies (access & refresh)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'

  /auth/login:
    post:
      tags: [auth]
      summary: Login
      operationId: authLogin
      security: []
      parameters:
        - $ref: '#/components/parameters/CsrfTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: OK (sets mc_token & mc_refresh cookies)
          headers:
            Set-Cookie:
              schema:
                type: string
              description: httpOnly cookies (access & refresh)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'

  /auth/me:
    get:
      tags: [auth]
      summary: Current user
      operationId: authMe
      security:
        - cookieAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
        "401":
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [auth]
      summary: Rotate refresh token and issue new access token
      operationId: authRefresh
      security:
        - refreshCookieAuth: []
      parameters:
        - $ref: '#/components/parameters/CsrfTokenHeader'
      responses:
        "200":
          description: OK (sets new mc_token; may also set new mc_refresh)
          headers:
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
  /auth/logout-everywhere:
    post:
      tags: [auth]
      summary: Revoke all user sessions and clear cookies
      operationId: authLogoutEverywhere
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/CsrfTokenHeader'
      responses:
        "200":
          description: OK (clears cookies)
          headers:
            Set-Cookie:
              schema:
                type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'