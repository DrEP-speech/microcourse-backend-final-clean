openapi: 3.0.3
info:
  title: MicroCourse API
  version: 1.0.0
  description: >
    Auth endpoints with cookie- and bearer-based authentication.
    The server sets an `mc_token` cookie on signup/login when SameSite=None is allowed.
servers:
  - url: /api
  - url: /api/v1
  - url: https://microcourse-backend-final-clean.onrender.com/api
tags:
  - name: auth
    description: Authentication

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: mc_token
      description: Send the `mc_token` cookie (set by login/signup) with requests.
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        role: { type: string, example: student }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    SignupPayload:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string, example: Tester }
        email: { type: string, format: email, example: tester123@example.com }
        password: { type: string, format: password, example: secret123 }
    LoginPayload:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: tester123@example.com }
        password: { type: string, format: password, example: secret123 }
    AuthResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: Legacy field; identical to accessToken when present
        accessToken:
          type: string
          description: JWT to use in Authorization: Bearer <token>
    ErrorResponse:
      type: object
      properties:
        success: { type: boolean, example: false }
        message: { type: string }

paths:
  /auth/signup:
    post:
      tags: [auth]
      summary: Sign up
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SignupPayload' }
            example: { name: Tester, email: tester123@example.com, password: secret123 }
      responses:
        '201':
          description: Created. Sets `mc_token` cookie and returns tokens.
          headers:
            Set-Cookie:
              schema:
                type: string
              description: mc_token=…; HttpOnly; Secure; SameSite=None
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/login:
    post:
      tags: [auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginPayload' }
            example: { email: tester123@example.com, password: secret123 }
      responses:
        '200':
          description: OK. Sets `mc_token` cookie and returns tokens.
          headers:
            Set-Cookie:
              schema:
                type: string
              description: mc_token=…; HttpOnly; Secure; SameSite=None
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/me:
    get:
      tags: [auth]
      summary: Current user
      description: >
        Requires either `mc_token` cookie or `Authorization: Bearer <token>`.
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/logout:
    post:
      tags: [auth]
      summary: Logout and clear cookie
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
